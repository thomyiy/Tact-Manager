<%- contentFor('HeaderCss') %>
<%- include("../partials/title-meta", {"title": "Accueil"}) %>

<!-- nouisliderribute css -->
<link rel="stylesheet" href="/assets/libs/nouislider/nouislider.min.css">

<!-- color picker css -->
<link rel="stylesheet" href="/assets/libs/@simonwep/pickr/themes/classic.min.css"/> <!-- 'classic' theme -->
<link rel="stylesheet" href="/assets/libs/@simonwep/pickr/themes/monolith.min.css"/> <!-- 'monolith' theme -->
<link rel="stylesheet" href="/assets/libs/@simonwep/pickr/themes/nano.min.css"/> <!-- 'nano' theme -->
<link rel="stylesheet" href="/assets/libs/gridjs/theme/mermaid.min.css">

<!-- datepicker css -->
<link rel="stylesheet" href="/assets/libs/flatpickr/flatpickr.min.css">
<%- contentFor('breadcrumb') %>

<!-- start page title -->
<div class="row">
    <div class="col-12">
        <div class="page-title-box d-flex align-items-center justify-content-between">
            <h4 class="mb-0">Ambiance Score : <%= sessionSchool.name %> <%= type %></h4>

            <div class="page-title-right">
                <ol class="breadcrumb m-0">
                    <li class="breadcrumb-item"><a href="javascript: void(0);">Ecommerce</a></li>
                    <li class="breadcrumb-item active">Ambiance Score : <%= sessionSchool.name %> <%= type %></li>
                </ol>
            </div>

        </div>
    </div>
</div>
<!-- end page title -->

<%- contentFor('body') %>
<div class="toast-container position-fixed center-0 end-0 p-3" style="z-index:9999">
    <div id="liveToast" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="toast-header">
            <i class="rounded me-2 fas fa-info-circle"></i>
            <strong class="me-auto">Updated</strong>
            <button type="button" class="btn-close" data-bs-dismiss="toast"
                    aria-label="Close"></button>
        </div>
    </div>
</div>
<div class="row">
    <div class="col-xl-12 col-lg-12">
        <div class="card">
            <div class="card-body">
                <div>
                    <div class="row">
                        <div class="col-md-6">
                            <div>
                                <h5>Ambiance Score : <%= sessionSchool.name %> <%= type %></h5>
                            </div>
                        </div>
                    </div>
                    <!-- end row -->

                    <div class="col-lg-12">
                        <div class="card">
                            <div class="card-header">
                            </div><!-- end card header -->
                            <div class="card-body">
                                <ul class="nav nav-pills nav-justified" role="tablist">
                                    <% if( ambianceScores.length ==0) { %>
                                        <h5>Aucun arbitre affecté</h5>
                                    <%}%>
                                    <% for(var i = 0; i < ambianceScores.length; i++) { %>
                                        <li class="nav-item waves-effect waves-light">
                                            <a class="nav-link <% if(i === 0){ %>active<% } %>"
                                               id="<%= ambianceScores[i]._id %>-tab" data-bs-toggle="tab"
                                               href="#<%= ambianceScores[i]._id %>" role="tab">
                                                <span class="d-block d-sm-none"><i class="fas fa-home"></i></span>
                                                <span class="d-none d-sm-block"><%= ambianceScores[i].arbitrator.firstname %> <%= ambianceScores[i].arbitrator.lastname %></span>
                                            </a>
                                        </li>
                                    <% } %>
                                </ul>

                                <div class="tab-content p-3 text-muted">
                                    <% for(var i = 0; i < ambianceScores.length; i++) { %>
                                        <div class="tab-pane <% if(i === 0){ %>active<% } %>"
                                             id="<%= ambianceScores[i]._id %>"
                                             role="tabpanel">
                                            <div id="<%= ambianceScores[i]._id %>-table"></div>
                                        </div>
                                    <% } %>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-12">
                        <div class="card">
                            <div class="card-header">
                                <h5>Moyenne</h5>
                            </div><!-- end card header -->
                            <div class="card-body">
                                <div id="table-average"></div>
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-12">
                        <div class="card">
                            <div class="card-header">
                                <h5>Arbitre</h5>
                            </div><!-- end card header -->
                            <div class="card-body">

                                <div id="table-arbitrator"></div>

                                <button type="button" class="btn btn-primary waves-effect waves-light"
                                        data-bs-toggle="modal" data-bs-target="#myModal">Ajouter un arbitre
                                </button>

                                <!-- sample modal content -->
                                <div id="myModal" class="modal fade" tabindex="-1" aria-labelledby="myModalLabel"
                                     aria-hidden="true" data-bs-scroll="true">
                                    <div class="modal-dialog">
                                        <div class="modal-content">
                                            <div class="modal-header">
                                                <h5 class="modal-title" id="myModalLabel">Ajouter un arbitre</h5>
                                                <button type="button" class="btn-close" data-bs-dismiss="modal"
                                                        aria-label="Close"></button>
                                            </div>
                                            <div class="modal-body">
                                                <form action="/ambiance/<%= type %>/affectarbitrator" method="post"
                                                      class="needs-validation" novalidate>
                                                    <div class="mb-3 row">
                                                        <label class="col-md-2 col-form-label">Arbitre</label>
                                                        <div class="col-md-10">
                                                            <select class="form-select" name="arbitratorId">
                                                                <% for(var i = 0; i < arbitrators.length; i++) { %>
                                                                    <option value="<%= arbitrators[i]._id %>"><%= arbitrators[i].firstname %> <%= arbitrators[i].lastname %>
                                                                    </option>
                                                                <% } %>
                                                            </select>
                                                            <input type="hidden" id="schoolId" name="schoolId"
                                                                   value="<%= sessionSchool._id %>"/>
                                                        </div>
                                                    </div>
                                                    <button class="btn btn-primary" type="submit">Valider</button>
                                                </form>
                                            </div><!-- /.modal-content -->
                                        </div><!-- /.modal-dialog -->
                                    </div><!-- /.modal -->
                                </div>
                            </div>
                            <!-- end card body -->
                        </div>
                        <!-- end card -->
                    </div>
                    <!-- end col -->
                </div>
                <!-- end row -->
            </div>
        </div>
    </div>
</div>

</div>

<%- contentFor('FooterJs') %>

<!-- gridjs js -->
<script src="/assets/libs/gridjs/gridjs.umd.js"></script>


<script src="/assets/libs/choices.js/public/assets/scripts/choices.min.js"></script>

<!-- color picker js -->
<script src="/assets/libs/@simonwep/pickr/pickr.min.js"></script>
<script src="/assets/libs/@simonwep/pickr/pickr.es5.min.js"></script>

<!-- datepicker js -->
<script src="/assets/libs/flatpickr/flatpickr.min.js"></script>
<script src="/assets/js/pages/form-validation.init.js"></script>
<script>

</script>

<script>

    const toastBootstrap = bootstrap.Toast.getOrCreateInstance(document.getElementById('liveToast'))

    var columns = ["Critère", "Note"];
    var data = <%- JSON.stringify(ambianceScores) %>;

    function onInputChange(input, key, acsId, max) {
        if (input.value > max) input.value = max
        if (input.value < 0) input.value = 0
        var d = data.find((element) =>
            element._id === acsId);
        d[key] = input.value
        fetch("/ambiance/<%= type %>/update", {
            method: "POST",
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(d)
        })
            .then((response) => {
                console.log(response.status)
                if (response.status === 200)
                    toastBootstrap.show()
            });
    }

    function buildInput(acsId, key, value, max) {
        return gridjs.html(`<input type="number" oninput="onInputChange(this,'${key}','${acsId}',${max})" id="name" name="name" value="${value}" min="1" max="80" />`)
    }

    new gridjs.Grid({
        columns: ["Nom", "Prenom", "Action"],
        data: () => {
            var data = <%- JSON.stringify(affectedArbitrators) %>;
            return data.map((e) => [e.firstname, e.lastname, gridjs.html(`<button class="btn btn-light btn-sm dropdown-toggle" type="button" onclick="removeArbitrator('${e._id}')" aria-expanded="false"><i class="fas fa-backspace"></i></button>`)]);
        },
    }).render(document.getElementById("table-arbitrator"));

    function removeArbitrator(id) {
        console.log("removeArbitrator : " + id)
        fetch("/ambiance/<%= type %>/removearbitrator", {
            method: "POST",
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({schoolId: "<%= sessionSchool._id %>", arbitratorId: id})
        })
            .then((response) => {
                console.log(response.status)
                if (response.status === 200)
                    window.location.replace("/ambiance/<%= sessionSchool.name %>/<%= type %>");
            });
    }

    <% if(type === "cortege"){ %>
    data.forEach(d => {
        new gridjs.Grid({
            columns: columns,
            data: () => {
                return [["Arrivée avec toute la délégation très bonne coordination /5", buildInput(d._id, "ArrivalWithTheEntireDelegationVeryGoodCoordination", d.ArrivalWithTheEntireDelegationVeryGoodCoordination, 5)],
                    ["Chants /20", buildInput(d._id, "Songs", d.Songs, 20)],
                    ["Coordination, parfait synchronisation /4", buildInput(d._id, "CoordinationPerfectSynchronization", d.CoordinationPerfectSynchronization, 4)],
                    ["Costume/ Maquillage /20", buildInput(d._id, "CostumeMakeup", d.CostumeMakeup, 20)],
                    ["Instruments grande variété/3", buildInput(d._id, "WideVarietyOfInstruments", d.WideVarietyOfInstruments, 3)],
                    ["Organisation du cortège (création et agencement clair des éléments) /5", buildInput(d._id, "OrganizationOfTheProcession", d.OrganizationOfTheProcession, 5)],
                    ["Rythmique clairs et entrainants /5", buildInput(d._id, "ClearAndCatchyRhythm", d.ClearAndCatchyRhythm, 5)],
                    ["Vue d’ensemble (spectaculaire et sécurisée) /5", buildInput(d._id, "OverviewSpectacularAndSecure", d.OverviewSpectacularAndSecure, 5)]
                ]
            },
        }).render(document.getElementById(d._id + "-table"));
    })
    new gridjs.Grid({
        columns: columns,
        data: () => {
            return [["Arrivée avec toute la délégation très bonne coordination", data.reduce((total, next) => total + next.ArrivalWithTheEntireDelegationVeryGoodCoordination, 0) / data.length],
                ["Chants", data.reduce((total, next) => total + next.Songs, 0) / data.length],
                ["Coordination, parfait synchronisation", data.reduce((total, next) => total + next.CoordinationPerfectSynchronization, 0) / data.length],
                ["Costume/ Maquillage", data.reduce((total, next) => total + next.CostumeMakeup, 0) / data.length],
                ["Instruments grande variété", data.reduce((total, next) => total + next.WideVarietyOfInstruments, 0) / data.length],
                ["Organisation du cortège (création et agencement clair des éléments)", data.reduce((total, next) => total + next.OrganizationOfTheProcession, 0) / data.length],
                ["Rythmique clairs et entrainants", data.reduce((total, next) => total + next.ClearAndCatchyRhythm, 0) / data.length],
                ["Vue d’ensemble (spectaculaire et sécurisée)", data.reduce((total, next) => total + next.OverviewSpectacularAndSecure, 0) / data.length]
            ]
        },
    }).render(document.getElementById("table-average"));
    <% } else if (type === "opening") { %>
    data.forEach(d => {
        new gridjs.Grid({
            columns: columns,
            data: () => {
                return [["Déploiement coordination /4", buildInput(d._id, "CoordinationDeployment", d.CoordinationDeployment, 4)],
                    ["Diversité, grande diversité de designs et de couleurs /9", buildInput(d._id, "DiversityGreatVarietyOfDesignsAndColors", d.DiversityGreatVarietyOfDesignsAndColors, 9)],
                    ["Interaction avec les Sportifs /5", buildInput(d._id, "InteractionWithAthletes", d.InteractionWithAthletes, 5)],
                    ["Nombre de drapeaux /9", buildInput(d._id, "NumberOfFlags", d.NumberOfFlags, 9)],
                    ["Qualité visuelle /5", buildInput(d._id, "VisualQuality", d.VisualQuality, 5)],
                    ["Qualité visuelle et concept /8", buildInput(d._id, "VisualQualityAndConcept", d.VisualQualityAndConcept, 8)],
                    ["Respect du temps de passage des autres délégations /2", buildInput(d._id, "RespectThePassageTimeOfOtherDelegations", d.RespectThePassageTimeOfOtherDelegations, 2)],
                    ["Tour des sportifs (présentation dynamique) /5", buildInput(d._id, "SportsmansTour", d.SportsmansTour, 5)],
                    ["Utilisation dynamique /5", buildInput(d._id, "DynamicUse", d.DynamicUse, 5)],
                    ["Visuel (drapeaux, tifo) /4", buildInput(d._id, "VisualFlagsTifo", d.VisualFlagsTifo, 4)]
                ]
            },
        }).render(document.getElementById(d._id + "-table"));
    })

    new gridjs.Grid({
        columns: columns,
        data: () => {
            return [["Déploiement coordination", data.reduce((total, next) => total + next.CoordinationDeployment, 0) / data.length],
                ["Diversité, grande diversité de designs et de couleurs", data.reduce((total, next) => total + next.DiversityGreatVarietyOfDesignsAndColors, 0) / data.length],
                ["Interaction avec les Sportifs",data.reduce((total, next) => total + next.InteractionWithAthletes, 0) / data.length],
                ["Nombre de drapeaux",  data.reduce((total, next) => total + next.NumberOfFlags, 0) / data.length],
                ["Qualité visuelle",  data.reduce((total, next) => total + next.VisualQuality, 0) / data.length],
                ["Qualité visuelle et concept",  data.reduce((total, next) => total + next.VisualQualityAndConcept, 0) / data.length],
                ["Respect du temps de passage des autres délégations",  data.reduce((total, next) => total + next.RespectThePassageTimeOfOtherDelegations, 0) / data.length],
                ["Tour des sportifs (présentation dynamique)",  data.reduce((total, next) => total + next.SportsmansTour, 0) / data.length],
                ["Utilisation dynamique",  data.reduce((total, next) => total + next.DynamicUse, 0) / data.length],
                ["Visuel (drapeaux, tifo)", data.reduce((total, next) => total + next.VisualFlagsTifo, 0) / data.length]
            ]
        },
    }).render(document.getElementById("table-average"));
    <% }  else if (type === "matchs") { %>
    data.forEach(d => {
        new gridjs.Grid({
            columns: columns,
            data: () => {
                return [["Ambiance, bordel, ambiance électrique et joyeuse /6", buildInput(d._id, "AtmosphereBrothelElectricAndJoyfulAtmosphere", d.AtmosphereBrothelElectricAndJoyfulAtmosphere, 6)],
                    ["Animation (auditive) Improvisations, chants dôles, interactions avec le match /5", buildInput(d._id, "AnimationImprovisationsFunnySongsInteractionsWithTheMatch", d.AnimationImprovisationsFunnySongsInteractionsWithTheMatch, 5)],
                    ["Animations visuelles pendant les chants (Chorégraphies, ola, sauts coordonnés)/5", buildInput(d._id, "VisualAnimationsDuringTheSongs", d.VisualAnimationsDuringTheSongs, 5)],
                    ["Danse/chorée/animation parfaitement coordonnées et entrainantes /6", buildInput(d._id, "PerfectlyCoordinatedAndLivelyDanceChoreaEntertainment", d.PerfectlyCoordinatedAndLivelyDanceChoreaEntertainment, 6)],
                    ["Diversité, grande variété de chants sans répétitions /9", buildInput(d._id, "DiversityWideVarietyOfSongsWithoutRepetitions", d.DiversityWideVarietyOfSongsWithoutRepetitions, 9)],
                    ["Endurance soutenue durant toute la durée de la compétition /9", buildInput(d._id, "SustainedEnduranceThroughoutTheDurationOfTheCompetition", d.SustainedEnduranceThroughoutTheDurationOfTheCompetition, 9)],
                    ["Fair play & Respect (Insultes, Chants) /5", buildInput(d._id, "FairPlayRespect", d.FairPlayRespect, 5)],
                    ["Maestro (énergie et coordination) /5", buildInput(d._id, "Maestro", d.Maestro, 5)],
                    ["Qualité des chants clairs et mélodieux /6", buildInput(d._id, "QualityOfClearAndMelodiousSinging", d.QualityOfClearAndMelodiousSinging, 6)],
                    ["Tribune propre /5", buildInput(d._id, "OwnStand", d.OwnStand, 5)]
                ]
            },
        }).render(document.getElementById(d._id + "-table"));
    })

    new gridjs.Grid({
        columns: columns,
        data: () => {
            return [["Ambiance, bordel, ambiance électrique et joyeuse", data.reduce((total, next) => total + next.AtmosphereBrothelElectricAndJoyfulAtmosphere, 0) / data.length],
                ["Animation (auditive) Improvisations, chants dôles, interactions avec le match", data.reduce((total, next) => total + next.AnimationImprovisationsFunnySongsInteractionsWithTheMatch, 0) / data.length],
                ["Animations visuelles pendant les chants (Chorégraphies, ola, sauts coordonnés)",data.reduce((total, next) => total + next.VisualAnimationsDuringTheSongs, 0) / data.length],
                ["Danse/chorée/animation parfaitement coordonnées et entrainantes",  data.reduce((total, next) => total + next.PerfectlyCoordinatedAndLivelyDanceChoreaEntertainment, 0) / data.length],
                ["Diversité, grande variété de chants sans répétitions",  data.reduce((total, next) => total + next.DiversityWideVarietyOfSongsWithoutRepetitions, 0) / data.length],
                ["Endurance soutenue durant toute la durée de la compétition",  data.reduce((total, next) => total + next.SustainedEnduranceThroughoutTheDurationOfTheCompetition, 0) / data.length],
                ["Fair play & Respect (Insultes, Chants)",  data.reduce((total, next) => total + next.FairPlayRespect, 0) / data.length],
                ["Maestro (énergie et coordination)",  data.reduce((total, next) => total + next.Maestro, 0) / data.length],
                ["Qualité des chants clairs et mélodieux",  data.reduce((total, next) => total + next.QualityOfClearAndMelodiousSinging, 0) / data.length],
                ["Tribune propre", data.reduce((total, next) => total + next.OwnStand, 0) / data.length]
            ]
        },
    }).render(document.getElementById("table-average"));
    <% }  else if (type === "stands") { %>
    data.forEach(d => {
        new gridjs.Grid({
            columns: columns,
            data: () => {
                return [["Originalité concept /9", buildInput(d._id, "OriginalityConcept", d.OriginalityConcept, 9)],
                    ["Qualité de construction solide, bien pensée et sécurisée /9", buildInput(d._id, "SolidWellThoughtOutAndSecureBuildQuality", d.SolidWellThoughtOutAndSecureBuildQuality, 9)],
                    ["Qualité visuelle /9", buildInput(d._id, "VisualQuality", d.VisualQuality, 9)],
                    ["Stand /10", buildInput(d._id, "Stand", d.Stand, 10)]
                ]
            },
        }).render(document.getElementById(d._id + "-table"));
    })

    new gridjs.Grid({
        columns: columns,
        data: () => {
            return [["Originalité concept", data.reduce((total, next) => total + next.OriginalityConcept, 0) / data.length],
                ["Qualité de construction solide, bien pensée et sécurisée", data.reduce((total, next) => total + next.SolidWellThoughtOutAndSecureBuildQuality, 0) / data.length],
                ["Qualité visuelle",data.reduce((total, next) => total + next.VisualQuality, 0) / data.length],
                ["Stand",  data.reduce((total, next) => total + next.Stand, 0) / data.length]
            ]
        },
    }).render(document.getElementById("table-average"));
    <% }  else if (type === "final") { %>
    data.forEach(d => {
        new gridjs.Grid({
            columns: columns,
            data: () => {
                return [["Ambiance, bordel, ambiance électrique et joyeuse /4", buildInput(d._id, "AtmosphereBrothelElectricAndJoyfulAtmosphere", d.AtmosphereBrothelElectricAndJoyfulAtmosphere, 4)],
                    ["Danse/chorée/animation parfaitement coordonnées et entrainantes /10", buildInput(d._id, "PerfectlyCoordinatedAndLivelyDanceChoreaEntertainment", d.PerfectlyCoordinatedAndLivelyDanceChoreaEntertainment, 10)],
                    ["Déploiement coordination", buildInput(d._id, "CoordinationDeployment /10", d.CoordinationDeployment, 10)],
                    ["Fair play & Respect (Insultes, Chants) /5", buildInput(d._id, "FairPlayRespect", d.FairPlayRespect, 5)],
                    ["Qualité des chants clairs et mélodieux /3", buildInput(d._id, "QualityOfClearAndMelodiousSinging", d.QualityOfClearAndMelodiousSinging, 3)],
                    ["Qualité visuelle /4", buildInput(d._id, "VisualQuality", d.VisualQuality, 4)],
                    ["Qualité visuelle et concept /15", buildInput(d._id, "VisualQualityAndConcept", d.VisualQualityAndConcept, 15)],
                    ["Respect du temps de passage des autres délégations /3", buildInput(d._id, "RespectThePassageTimeOfOtherDelegations", d.RespectThePassageTimeOfOtherDelegations, 3)],
                    ["Utilisation dynamique /4", buildInput(d._id, "DynamicUse", d.DynamicUse, 4)],
                    ["Visuel (drapeaux, tifo) /6", buildInput(d._id, "VisualFlagsTifo", d.VisualFlagsTifo, 6)]
                ]
            },
        }).render(document.getElementById(d._id + "-table"));
    })

    new gridjs.Grid({
        columns: columns,
        data: () => {
            return [["Ambiance, bordel, ambiance électrique et joyeuse", data.reduce((total, next) => total + next.AtmosphereBrothelElectricAndJoyfulAtmosphere, 0) / data.length],
                ["Danse/chorée/animation parfaitement coordonnées et entrainantes", data.reduce((total, next) => total + next.PerfectlyCoordinatedAndLivelyDanceChoreaEntertainment, 0) / data.length],
                ["Déploiement coordination",data.reduce((total, next) => total + next.CoordinationDeployment, 0) / data.length],
                ["Fair play & Respect (Insultes, Chants)",  data.reduce((total, next) => total + next.FairPlayRespect, 0) / data.length],
                ["Qualité des chants clairs et mélodieux",  data.reduce((total, next) => total + next.QualityOfClearAndMelodiousSinging, 0) / data.length],
                ["Qualité visuelle",  data.reduce((total, next) => total + next.VisualQuality, 0) / data.length],
                ["Qualité visuelle et concept",  data.reduce((total, next) => total + next.VisualQualityAndConcept, 0) / data.length],
                ["Respect du temps de passage des autres délégations",  data.reduce((total, next) => total + next.RespectThePassageTimeOfOtherDelegations, 0) / data.length],
                ["Utilisation dynamique",  data.reduce((total, next) => total + next.DynamicUse, 0) / data.length],
                ["Visuel (drapeaux, tifo)", data.reduce((total, next) => total + next.VisualFlagsTifo, 0) / data.length]
            ]
        },
    }).render(document.getElementById("table-average"));
    <% }  else if (type === "hospitality") { %>
    data.forEach(d => {
        new gridjs.Grid({
            columns: columns,
            data: () => {
                return [["Inscription et présence de 5 alumni /5", buildInput(d._id, "RegistrationAndPresenceOf5Alumni", d.RegistrationAndPresenceOf5Alumni, 5)],
                    ["Inscription et présence du doyen /10", buildInput(d._id, "RegistrationAndPresenceOfTheDean", d.RegistrationAndPresenceOfTheDean, 10)]
                ]
            },
        }).render(document.getElementById(d._id + "-table"));
    })

    new gridjs.Grid({
        columns: columns,
        data: () => {
            return [["Inscription et présence de 5 alumni", data.reduce((total, next) => total + next.RegistrationAndPresenceOf5Alumni, 0) / data.length],
                ["Inscription et présence du doyen", data.reduce((total, next) => total + next.RegistrationAndPresenceOfTheDean, 0) / data.length]
            ]
        },
    }).render(document.getElementById("table-average"));
    <% }%>

</script>

<script src="/assets/js/pages/fontawesome.init.js"></script>

