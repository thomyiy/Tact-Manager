<%- contentFor('HeaderCss') %>
<%- include("partials/title-meta", {"title": "Accueil"}) %>

<!-- nouisliderribute css -->
<link rel="stylesheet" href="/assets/libs/nouislider/nouislider.min.css">

<!-- color picker css -->
<link rel="stylesheet" href="/assets/libs/@simonwep/pickr/themes/classic.min.css"/> <!-- 'classic' theme -->
<link rel="stylesheet" href="/assets/libs/@simonwep/pickr/themes/monolith.min.css"/> <!-- 'monolith' theme -->
<link rel="stylesheet" href="/assets/libs/@simonwep/pickr/themes/nano.min.css"/> <!-- 'nano' theme -->
<link rel="stylesheet" href="/assets/libs/gridjs/theme/mermaid.min.css">

<!-- datepicker css -->
<link rel="stylesheet" href="/assets/libs/flatpickr/flatpickr.min.css">
<%- contentFor('breadcrumb') %>

<!-- start page title -->
<div class="row">
    <div class="col-12">
        <div class="page-title-box d-flex align-items-center justify-content-between">
            <h4 class="mb-0">Cheerleading Score : <%= sessionSchool %></h4>

            <div class="page-title-right">
                <ol class="breadcrumb m-0">
                    <li class="breadcrumb-item"><a href="javascript: void(0);">Ecommerce</a></li>
                    <li class="breadcrumb-item active">Cheerleading Score : <%= sessionSchool %></li>
                </ol>
            </div>

        </div>
    </div>
</div>
<!-- end page title -->

<%- contentFor('body') %>

<div class="row">
    <div class="col-xl-12 col-lg-12">
        <div class="card">
            <div class="card-body">
                <div>
                    <div class="row">
                        <div class="col-md-6">
                            <div>
                                <h5>Cheerleading Score : <%= sessionSchool.name %></h5>
                            </div>
                        </div>
                    </div>
                    <!-- end row -->

                    <div class="col-lg-12">
                        <div class="card">
                            <div class="card-header">
                            </div><!-- end card header -->
                            <div class="card-body">
                                <h5>Stunt</h5>
                                <div id="table-stunt"></div>
                                <h5>Chorégraphie</h5>
                                <div id="table-choreography"></div>
                                <h5>Tumbling</h5>
                                <div id="table-tumbling"></div>
                                <h5>Sauts</h5>
                                <div id="table-jump"></div>
                                <h5>Interraction</h5>
                                <div id="table-interraction"></div>
                                <h5>Fair Play</h5>
                                <div id="table-fairplay"></div>
                            </div>
                            <!-- end card body -->
                        </div>
                        <!-- end card -->
                    </div>
                    <!-- end col -->
                </div>
                <!-- end row -->
            </div>
        </div>
    </div>
</div>

</div>

<%- contentFor('FooterJs') %>

<!-- gridjs js -->
<script src="/assets/libs/gridjs/gridjs.umd.js"></script>


<script src="/assets/libs/choices.js/public/assets/scripts/choices.min.js"></script>

<!-- color picker js -->
<script src="/assets/libs/@simonwep/pickr/pickr.min.js"></script>
<script src="/assets/libs/@simonwep/pickr/pickr.es5.min.js"></script>

<!-- datepicker js -->
<script src="/assets/libs/flatpickr/flatpickr.min.js"></script>
<script src="/assets/js/pages/form-validation.init.js"></script>
<script>

</script>

<script>

    var columns = ["Critère", "Note (1 - 80)"];
    var data = <%- JSON.stringify(cheerleadingScore) %>;

    function onInputChange(input, key) {
        console.log("onInputChange")
        if (input.value > 80) input.value = 80
        if (input.value < 1) input.value = 1
        data[key] = input.value
        fetch("/cheerleading/update", {
            method: "POST",
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(data)
        })
            .then((response) => {
                console.log(response.status)
            });
    }

    function buildInput(key, value) {
        return gridjs.html(`<input type="number" oninput="onInputChange(this,'${key}')" id="name" name="name" value="${value}" min="1" max="80" />`)
    }

    new gridjs.Grid({
        columns: columns,
        data: () => {
            return [["Difficulté", buildInput("stuntDifficulty", data.stuntDifficulty)],
                ["Exécution", buildInput("stuntExecution", data.stuntExecution)],
                ["Synchronisation", buildInput("stuntSynchronization", data.stuntSynchronization)],
                ["Sécurité", buildInput("stuntSecurity", data.stuntSecurity)]]
        },
    }).render(document.getElementById("table-stunt"));
    new gridjs.Grid({
        columns: columns,
        data: () => {
            return [["Synchronisation", buildInput("choreographySynchronization", data.choreographySynchronization)],
                ["Rythme avec la musique", buildInput("choreographyRythme", data.choreographyRythme)],
                ["Fluidité", buildInput("choreographyFluidity", data.choreographyFluidity)]]
        },
    }).render(document.getElementById("table-choreography"));
    new gridjs.Grid({
        columns: columns,
        data: () => {
            return [["Difficulté", buildInput("tumblingDifficulty", data.tumblingDifficulty)],
                ["Exécution", buildInput("tumblingExecution", data.tumblingExecution)],
                ["Sécurité", buildInput("tumblingSecurity", data.tumblingSecurity)]]
        },
    }).render(document.getElementById("table-tumbling"));
    new gridjs.Grid({
        columns: columns,
        data: () => {
            return [["Difficulté", buildInput("jumpDifficulty", data.jumpDifficulty)],
                ["Exécution", buildInput("jumpExecution", data.jumpExecution)],
                ["Synchronisation", buildInput("jumpSynchronization", data.jumpSynchronization)]]
        },
    }).render(document.getElementById("table-jump"));
    new gridjs.Grid({
        columns: columns,
        data: () => {
            return [["Créativité", buildInput("interractionCreativity", data.interractionCreativity)],
                ["Réaction des supporters", buildInput("interractionReaction", data.interractionReaction)]]
        },
    }).render(document.getElementById("table-interraction"));
    new gridjs.Grid({
        columns: columns,
        data: () => {
            return [["Attitude positive", buildInput("fairplayAttitude", data.fairplayAttitude)],
                ["respect des adversaires/jury/règles", buildInput("fairplayrespect", data.fairplayrespect)]]
        },
    }).render(document.getElementById("table-fairplay"));
</script>


