<%- contentFor('HeaderCss') %>
<%- include("partials/title-meta", {"title": "Accueil"}) %>

<!-- nouisliderribute css -->
<link rel="stylesheet" href="/assets/libs/nouislider/nouislider.min.css">

<!-- color picker css -->
<link rel="stylesheet" href="/assets/libs/@simonwep/pickr/themes/classic.min.css"/> <!-- 'classic' theme -->
<link rel="stylesheet" href="/assets/libs/@simonwep/pickr/themes/monolith.min.css"/> <!-- 'monolith' theme -->
<link rel="stylesheet" href="/assets/libs/@simonwep/pickr/themes/nano.min.css"/> <!-- 'nano' theme -->
<link rel="stylesheet" href="/assets/libs/gridjs/theme/mermaid.min.css">

<!-- datepicker css -->
<link rel="stylesheet" href="/assets/libs/flatpickr/flatpickr.min.css">
<%- contentFor('breadcrumb') %>

<!-- start page title -->
<!-- <div class="row">
    <div class="col-12">
        <div class="page-title-box d-flex align-items-center justify-content-between">
            <h4 class="mb-0">Teams</h4>

            <div class="page-title-right">
                <ol class="breadcrumb m-0">
                    <li class="breadcrumb-item"><a href="javascript: void(0);">Ecommerce</a></li>
                    <li class="breadcrumb-item active">Teams</li>
                </ol>
            </div>

        </div>
    </div>
</div> -->
<!-- end page title -->

<%- contentFor('body') %>

<div class="row">
    <div class="col-xl-12 col-lg-12">
        <div class="card">
            <div class="card-body">
                <div>
                    <div class="row">
                        <div class="col-md-6">
                            <div>
                                <h5><%= sport %></h5>
                            </div>
                        </div>
                    </div>
                    <!-- end row -->
                    <button type="button" class="btn btn-primary waves-effect waves-light" onclick="createTournament()">Créer un nouveau tournoi</button>
                    
                    <!-- Table Content -->
                    <div class="col-lg-12 mt-4">
                        <div class="card">
                            <div class="card-header">
                                <h5>Liste des équipes</h5>
                            </div><!-- end card header -->
                            <div class="card-body">
                                <div id="table-pagination"></div>
                            </div>
                            <!-- end card body -->
                        </div>
                        <!-- end card -->
                    </div>
                    <!-- end col -->
                    <!-- end row -->
                </div>
            </div>
        </div>
    </div>

</div>

<%- contentFor('FooterJs') %>


<!-- gridjs js -->
<script src="/assets/libs/gridjs/gridjs.umd.js"></script>


<script src="/assets/libs/choices.js/public/assets/scripts/choices.min.js"></script>

<!-- color picker js -->
<script src="/assets/libs/@simonwep/pickr/pickr.min.js"></script>
<script src="/assets/libs/@simonwep/pickr/pickr.es5.min.js"></script>

<!-- datepicker js -->
<script src="/assets/libs/flatpickr/flatpickr.min.js"></script>
<script src="/assets/js/pages/form-validation.init.js"></script>
<script>

function createTournament() {
    return fetch("/tournament/create", {
        method: 'POST',
        headers: {
            'Accept': 'application/json',
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({ 
            sport: "<%= sport %>",
        })
    });
}

var grid = new gridjs.Grid({
    columns: [
        "Equipe 1", 
        "Equipe 2", 
        {
            name: "Score Equipe 1",
            formatter: (cell, row) => {
                return gridjs.html(`<span class="editable-score1" data-id="${row.cells[0].data}-${row.cells[1].data}">${cell}</span>`);
            }
        },
        {
            name: "Score Equipe 2",
            formatter: (cell, row) => {
                return gridjs.html(`<span class="editable-score2" data-id="${row.cells[0].data}-${row.cells[1].data}">${cell}</span>`);
            }
        },
        "Vainqueur",
        "Poule",
        {
            name: "Temps Final",
            formatter: (cell, row) => {
                return gridjs.html(`<span class="editable-time" data-id="${row.cells[0].data}-${row.cells[1].data}">${cell}</span>`);
            }
        }
    ],
    pagination: { limit: 30 },
    data: async () => {
        var data = await fetch("/tournament/<%= sport %>/getAll", {
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            },
        })
        .then((response) => response.json());

        return data.map((e) => [
            e.team1, 
            e.team2, 
            `${e.score.team1Score}`,
            `${e.score.team2Score}`,
            e.winnerTeam,
            e.pool,
            e.time
        ]);
    },
    sort: true
}).render(document.getElementById("table-pagination"));

document.addEventListener('click', function(event) {
    if (event.target.classList.contains('editable-score1')) {
        handleScore(event.target, 1);
    } else if (event.target.classList.contains('editable-score2')) {
        handleScore(event.target, 2);
    } else if (event.target.classList.contains('editable-time')) {
        handleTime(event.target);
    }
});

function isScoreGood(newScore) {
    if (typeof newScore !== 'string') {
        return false;
    }

    if (isNaN(newScore) || newScore < 0) {
        return false;
    }

    return true;
}

function isTimeGood(newTime) {
    const time = parseInt(newTime, 10);

    if (isNaN(time) || time < 0 || time > 200) {
        return false;
    }

    return true;
}

function getWinner(team1, team1Score, team2, team2Score) {
    if (team1Score === team2Score)
        return undefined;
    if (team1Score > team2Score)
        return team1;
    return team2;
}

function handleScore(scoreElement, team) {
    const Data = scoreElement.getAttribute('data-id').split('-');
    const team1 = Data[0], team2 = Data[1];
    let team1Score, team2Score;
    let currentScore = parseInt(scoreElement.textContent.trim());

    const timeElement = document.querySelector(`.editable-time[data-id="${team1}-${team2}"]`);
    let currentTime = timeElement ? parseInt(timeElement.textContent.trim()) : null;

    const score1Element = document.querySelector(`.editable-score1[data-id="${team1}-${team2}"]`);
    team1Score = timeElement ? parseInt(score1Element.textContent.trim()) : null;
    
    const score2Element = document.querySelector(`.editable-score2[data-id="${team1}-${team2}"]`);
    team2Score = timeElement ? parseInt(score2Element.textContent.trim()) : null;

    const newScore = prompt(`Entrez le nouveau score pour l'équipe ${team === 1 ? team1 : team2}`, currentScore);

    if (team == 1) {
        team1Score = parseInt(newScore);
    } else if (team == 2) {
        team2Score = parseInt(newScore);
    }

    if (isScoreGood(newScore)) {

        fetch("/tournament/<%= sport %>/updateMatch", {
            method: 'POST',
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                team1,
                team2,
                score : {
                    team1Score: team1Score,
                    team2Score: team2Score,
                },
                time: currentTime,
            })
        })
        .then(response => {
            if (!response.ok) {
                throw new Error('Erreur réseau lors de la mise à jour du match');
            }
            return response.json();
        })
        .then(data => {
            window.location.reload();
        })
        .catch(error => {
            console.error("Erreur :", error);
        });
    } else {
        alert("Le format du score est incorrect. Veuillez entrer un score valide sous forme d'entier.");
    }
}

function handleTime(scoreElement) {
    const Data = scoreElement.getAttribute('data-id').split('-');
    const team1 = Data[0], team2 = Data[1];
    let team1Score, team2Score;
    let currentScore = parseInt(scoreElement.textContent.trim());

    const timeElement = document.querySelector(`.editable-time[data-id="${team1}-${team2}"]`);
    let currentTime = timeElement ? parseInt(timeElement.textContent.trim()) : null;

    const score1Element = document.querySelector(`.editable-score1[data-id="${team1}-${team2}"]`);
    team1Score = timeElement ? parseInt(score1Element.textContent.trim()) : null;
    
    const score2Element = document.querySelector(`.editable-score2[data-id="${team1}-${team2}"]`);
    team2Score = timeElement ? parseInt(score2Element.textContent.trim()) : null;

    const newTime = prompt(`Entrez le temps final du match entre ${team1} et ${team2}`, currentTime);

    if (isTimeGood(newTime)) {

        fetch("/tournament/<%= sport %>/updateMatch", {
            method: 'POST',
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                team1,
                team2,
                score : {
                    team1Score: team1Score,
                    team2Score: team2Score,
                },
                time: newTime,
            })
        })
        .then(response => {
            if (!response.ok) {
                throw new Error('Erreur réseau lors de la mise à jour du match');
            }
            return response.json();
        })
        .then(data => {
            window.location.reload();
        })
        .catch(error => {
            console.error("Erreur :", error);
        });
    } else {
        alert("Le format du score est incorrect. Veuillez entrer un score valide sous forme d'entier.");
    }
}

</script>
