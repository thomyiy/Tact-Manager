<%- contentFor('HeaderCss') %>
<%- include("partials/title-meta", {"title": "Accueil"}) %>

<!-- nouisliderribute css -->
<link rel="stylesheet" href="/assets/libs/nouislider/nouislider.min.css">

<!-- color picker css -->
<link rel="stylesheet" href="/assets/libs/@simonwep/pickr/themes/classic.min.css"/> <!-- 'classic' theme -->
<link rel="stylesheet" href="/assets/libs/@simonwep/pickr/themes/monolith.min.css"/> <!-- 'monolith' theme -->
<link rel="stylesheet" href="/assets/libs/@simonwep/pickr/themes/nano.min.css"/> <!-- 'nano' theme -->
<link rel="stylesheet" href="/assets/libs/gridjs/theme/mermaid.min.css">

<!-- datepicker css -->
<link rel="stylesheet" href="/assets/libs/flatpickr/flatpickr.min.css">
<%- contentFor('breadcrumb') %>

<%- contentFor('body') %>

<div class="row">
    <div class="col-xl-12 col-lg-12">
        <div class="card">
            <div class="card-body">
                <div>
                    <div class="row">
                        <div class="col-md-6">
                            <div>
                                <h5>Gestion de tournois</h5>
                            </div>
                        </div>
                    </div>
                    <!-- end row -->
                    <div class="row justify-content-center">
                        <div class="d-flex flex-column align-items-center col-md-6 mb-4 male-button-container">
                            <button type="button" class="btn btn-primary waves-effect waves-light mb-3" onclick="createTournament()">Créer les tournois</button>
                            <button type="button" class="btn btn-primary waves-effect waves-light" onclick="deleteTournament()">Supprimer les tournois</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-6">
            <div class="card">
                <div class="card-body">
                <h6>Matchs Salle Principale</h6>
                <div id="table-field-1"></div>
                </div>
                <!-- end card body -->
            </div>
            <!-- end card -->
            </div>
            <div class="col-lg-6">
            <div class="card">
                <div class="card-body">
                <h6>Matchs Salle Annexe</h6>
                <div id="table-field-2"></div>
                </div>
                <!-- end card body -->
            </div>
            <!-- end card -->
            </div>
        </div>
    </div>
</div>

<%- contentFor('FooterJs') %>

<!-- gridjs js -->
<script src="/assets/libs/gridjs/gridjs.umd.js"></script>

<script>
    new gridjs.Grid({
        columns: ["Team 1", "Team 2", "Départ", "Poule", "Programme"],
        data: async () => {
            var data = <%- JSON.stringify(matchsField1) %>;
            data.sort((a, b) => new Date(a.startTime) - new Date(b.startTime));

            return data.map((e) => [
                e.team1.school.name,
                e.team2.school.name,
                new Date(e.startTime).toLocaleTimeString('fr-FR', { hour: '2-digit', minute: '2-digit' }),
                e.pool.name,
                e.program.name
            ]);
        },
        sort: true
    }).render(document.getElementById("table-field-1"));

    new gridjs.Grid({
        columns: ["Team 1", "Team 2", "Départ", "Poule", "Programme"],
        data: async () => {
            var data = <%- JSON.stringify(matchsField2) %>;
            data.sort((a, b) => new Date(a.startTime) - new Date(b.startTime));

            return data.map((e) => [
                e.team1.school.name,
                e.team2.school.name,
                new Date(e.startTime).toLocaleTimeString('fr-FR', { hour: '2-digit', minute: '2-digit' }),
                e.pool.name,
                e.program.name
            ]);
        },
        sort: true
    }).render(document.getElementById("table-field-2"));

    async function createTournament() {
        try {
            const responses = await Promise.all([
                fetch(`/tournament/create`, {
                    method: 'POST',
                    headers: {
                        'Accept': 'application/json',
                        'Content-Type': 'application/json'
                    }
                })
            ]);

            alert("Les tournois pour tous les sports et pour tous les programmes ont été créés");
            location.reload();
        } catch (error) {
            console.error('Erreur:', error);
        }
    }

    async function deleteTournament() {
        try {
            await fetch(`/tournament/delete`, {
                method: 'DELETE',
                headers: {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json'
                },
            });

            alert("Les tournois pour tous les sports et pour tous les programmes ont été supprimés");
            location.reload();
        } catch (error) {
            console.error('Erreur:', error);
        }
    }

</script>
